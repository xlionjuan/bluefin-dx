---
name: Build and push main
on:
  #pull_request:
    #branches:
      #- main
  schedule:
    - cron: '05 22 * * 3'  # Runs at 22:05, only on Wednesday

  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  MY_IMAGE_NAME: "${{ github.event.repository.name }}"
  MY_IMAGE_DESC: "My Customized Universal Blue Image"
  #IMAGE_REGISTRY: "registry.hub.docker.com/xlionjuan"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:

      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3.7.0

      - name: Verify
        shell: bash
        run: |
          set -oue pipefail
          echo "---Grep image name---"
          containerfile_path="./Containerfile"
          image=$(grep -i '^FROM' "$containerfile_path" | awk '{print $2}')
          echo "Image: "${image}""
          echo ""
          echo "Using Cosign to verify image..."
          cosign verify \
            --key https://raw.githubusercontent.com/ublue-os/bluefin/refs/heads/main/cosign.pub \
            "${image}"

      #- name: Maximize build space
        #uses: ublue-os/remove-unwanted-software@v7

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("latest")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.MY_IMAGE_NAME }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ env.MY_IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.MY_IMAGE_NAME }}

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          # Postfix image name with -custom to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ env.MY_IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: false
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ github.actor }}
          password: ${{ github.token }}
          registry: ghcr.io

      - name: Push Image
        uses: redhat-actions/push-to-registry@v2
        if: github.event_name != 'pull_request'
        id: push
        #env:
          #REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}
          #REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          #username: ${{ env.REGISTRY_USER }}
          #password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --compression-format=zstd

      # Sign container
      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_REGISTRY }}/${{ github.event.repository.name }}@${TAGS}
        #cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_REGISTRY }}/${{ github.event.repository.name }}@${TAGS} --registry-username='${{ secrets.DOCKER_USERNAME }}' --registry-password='${{ secrets.DOCKER_PASSWORD }}'
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Attest
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE_REGISTRY }}/${{ env.MY_IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
